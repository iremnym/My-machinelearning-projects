{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10261110,"sourceType":"datasetVersion","datasetId":4305856}],"dockerImageVersionId":30918,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n#Bir tane şey seçtiğimiz için sınıflandırma modeli, kart kayıp mı o mu bu mu?","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:04:51.534569Z","iopub.execute_input":"2025-03-03T15:04:51.535062Z","iopub.status.idle":"2025-03-03T15:04:51.539536Z","shell.execute_reply.started":"2025-03-03T15:04:51.535030Z","shell.execute_reply":"2025-03-03T15:04:51.538530Z"}},"outputs":[],"execution_count":51},{"cell_type":"code","source":"df=pd.read_csv('/kaggle/input/telefon-bankacl-mobile-bank/banka.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:04:51.540797Z","iopub.execute_input":"2025-03-03T15:04:51.541084Z","iopub.status.idle":"2025-03-03T15:04:51.563707Z","shell.execute_reply.started":"2025-03-03T15:04:51.541053Z","shell.execute_reply":"2025-03-03T15:04:51.562743Z"}},"outputs":[],"execution_count":52},{"cell_type":"code","source":"df.head(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:04:51.565563Z","iopub.execute_input":"2025-03-03T15:04:51.565940Z","iopub.status.idle":"2025-03-03T15:04:51.580434Z","shell.execute_reply.started":"2025-03-03T15:04:51.565902Z","shell.execute_reply":"2025-03-03T15:04:51.579575Z"}},"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0                      sorgu      label  le\n0           0    kredi kartımı kaybettim  kartkayip   1\n1           1    banka kartımı kaybettim  kartkayip   1\n2           2  kredi kartımı bulamıyorum  kartkayip   1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>sorgu</th>\n      <th>label</th>\n      <th>le</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>kredi kartımı kaybettim</td>\n      <td>kartkayip</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>banka kartımı kaybettim</td>\n      <td>kartkayip</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>kredi kartımı bulamıyorum</td>\n      <td>kartkayip</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":53},{"cell_type":"markdown","source":"Burada y label olabilir, sorguyu ise text (metin haline getirmemiz gerek.)","metadata":{}},{"cell_type":"code","source":"df=df[['sorgu','label']]\ndf.head(3)\nstopwords=['fakat','lakin','ancak','acaba', 'ama', 'aslında', 'az', 'bazı', 'belki', 'biri', 'birkaç', 'birşey', 'biz', 'bu', 'çok', 'çünkü', 'da', 'daha', 'de', 'defa', 'diye', 'eğer', 'en', 'gibi', 'hem', 'hep', 'hepsi', 'her', 'hiç', 'için', 'ile', 'ise', 'kez', 'ki', 'kim', 'mı', 'mu', 'mü', 'nasıl', 'ne', 'neden', 'nerde', 'nerede', 'nereye', 'niçin', 'niye', 'o', 'sanki', 'şey', 'siz', 'şu', 'tüm', 've', 'veya', 'ya', 'yani']\n\nfor word in stopwords:\n    word= \" \"+word+\" \"\n    df['sorgu']=df['sorgu'].str.replace(word,\" \")\n\ndf.head(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:04:51.581869Z","iopub.execute_input":"2025-03-03T15:04:51.582145Z","iopub.status.idle":"2025-03-03T15:04:51.630587Z","shell.execute_reply.started":"2025-03-03T15:04:51.582123Z","shell.execute_reply":"2025-03-03T15:04:51.629756Z"}},"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"                       sorgu      label\n0    kredi kartımı kaybettim  kartkayip\n1    banka kartımı kaybettim  kartkayip\n2  kredi kartımı bulamıyorum  kartkayip","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sorgu</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>kredi kartımı kaybettim</td>\n      <td>kartkayip</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>banka kartımı kaybettim</td>\n      <td>kartkayip</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>kredi kartımı bulamıyorum</td>\n      <td>kartkayip</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":54},{"cell_type":"code","source":"mesaj=input(\"Yapmak istediğiniz işlemi giriniz.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:04:51.631786Z","iopub.execute_input":"2025-03-03T15:04:51.632151Z","iopub.status.idle":"2025-03-03T15:05:01.745302Z","shell.execute_reply.started":"2025-03-03T15:04:51.632115Z","shell.execute_reply":"2025-03-03T15:05:01.744507Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"Yapmak istediğiniz işlemi giriniz. kredi kartımı kaybettim\n"}],"execution_count":55},{"cell_type":"code","source":"mesajdf=pd.DataFrame({\"sorgu\":mesaj,\"label\":0},index=[42])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:05:01.746186Z","iopub.execute_input":"2025-03-03T15:05:01.746445Z","iopub.status.idle":"2025-03-03T15:05:01.751496Z","shell.execute_reply.started":"2025-03-03T15:05:01.746423Z","shell.execute_reply":"2025-03-03T15:05:01.750393Z"}},"outputs":[],"execution_count":56},{"cell_type":"code","source":"df=pd.concat([df,mesajdf],ignore_index=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:05:01.753690Z","iopub.execute_input":"2025-03-03T15:05:01.753969Z","iopub.status.idle":"2025-03-03T15:05:01.769024Z","shell.execute_reply.started":"2025-03-03T15:05:01.753943Z","shell.execute_reply":"2025-03-03T15:05:01.767903Z"}},"outputs":[],"execution_count":57},{"cell_type":"markdown","source":"* **pd.concat()** fonksiyonu, iki veya daha fazla DataFrame'i birleştirir. Bu örnekte, df ve mesajdf adlı iki DataFrame birleştiriliyor.\n  ","metadata":{}},{"cell_type":"markdown","source":"* Döngü, stopwords listesindeki her bir kelimeyi alır.\n  \n* word = \" \" + word + \" \": Bu satır, kelimenin başına ve sonuna boşluk ekler. Bu, yalnızca bağımsız kelimelerin eşleşmesini sağlar (örneğin, \"ama\" kelimesi \"aman\" içinde yanlışlıkla eşleşmesin diye).\n\n  \n* df['sorgu'].str.replace(word, \" \"): Bu işlem, sorgu sütunundaki her metni alır ve listedeki durdurma kelimelerini boşlukla değiştirir.","metadata":{}},{"cell_type":"markdown","source":"**\"kredi kartımı kaybettim\"** bu metini preprocessing etmemiz gerek. Preprocessing nasıl yapılır?\n* Noktalama işareti varsa kaldırılır.\n* Tüm harfler küçük harflere çevrilir.\n* stop-word leri kaldıramamız gerek.","metadata":{}},{"cell_type":"code","source":"cv=CountVectorizer(max_features=50) # Kelimeleri sayıya çevirecek araç\nx=cv.fit_transform(df['sorgu']).toarray() # Sayısal hale getir\ny=df['label'] #[0:-1] Son elemanı almaz.Çünkü son eleman tahmindir.\ntahmin=x[-1].copy() #x in son elemanı olmalı, yani -1.","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:05:01.770288Z","iopub.execute_input":"2025-03-03T15:05:01.770610Z","iopub.status.idle":"2025-03-03T15:05:01.782297Z","shell.execute_reply.started":"2025-03-03T15:05:01.770583Z","shell.execute_reply":"2025-03-03T15:05:01.781253Z"}},"outputs":[],"execution_count":58},{"cell_type":"markdown","source":"Tahmin (tahmin = x[-1]) işleminden önce modeli eğitmiş olmanız gerekir. Çünkü fit işlemi, eğitim verisi üzerinde bir modelin öğrenmesini sağlar ve eğitimden önce model bir şey öğrenmediği için doğru tahmin yapamaz.\n\n**Tahmin fit den sonra yapılır!**","metadata":{}},{"cell_type":"code","source":"x=x[0:-1]\ny=y[0:-1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:05:01.783333Z","iopub.execute_input":"2025-03-03T15:05:01.783688Z","iopub.status.idle":"2025-03-03T15:05:01.797383Z","shell.execute_reply.started":"2025-03-03T15:05:01.783625Z","shell.execute_reply":"2025-03-03T15:05:01.796456Z"}},"outputs":[],"execution_count":59},{"cell_type":"code","source":"x_train,x_test, y_train, y_test=train_test_split(x,y,random_state=21, train_size=0.7)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:05:01.798342Z","iopub.execute_input":"2025-03-03T15:05:01.798709Z","iopub.status.idle":"2025-03-03T15:05:01.815142Z","shell.execute_reply.started":"2025-03-03T15:05:01.798672Z","shell.execute_reply":"2025-03-03T15:05:01.814100Z"}},"outputs":[],"execution_count":60},{"cell_type":"code","source":"rf=RandomForestClassifier()\nmodel=rf.fit(x_train,y_train)\nskor=model.score(x_test,y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:05:01.816166Z","iopub.execute_input":"2025-03-03T15:05:01.816426Z","iopub.status.idle":"2025-03-03T15:05:01.982565Z","shell.execute_reply.started":"2025-03-03T15:05:01.816403Z","shell.execute_reply":"2025-03-03T15:05:01.981760Z"}},"outputs":[],"execution_count":61},{"cell_type":"code","source":"sonuc=model.predict([tahmin])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:05:01.983462Z","iopub.execute_input":"2025-03-03T15:05:01.983741Z","iopub.status.idle":"2025-03-03T15:05:01.995987Z","shell.execute_reply.started":"2025-03-03T15:05:01.983719Z","shell.execute_reply":"2025-03-03T15:05:01.995041Z"}},"outputs":[],"execution_count":62},{"cell_type":"code","source":"print(\"Sonuç:\",sonuc,\"Skor:\",skor)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:05:01.997206Z","iopub.execute_input":"2025-03-03T15:05:01.997580Z","iopub.status.idle":"2025-03-03T15:05:02.016123Z","shell.execute_reply.started":"2025-03-03T15:05:01.997541Z","shell.execute_reply":"2025-03-03T15:05:02.015078Z"}},"outputs":[{"name":"stdout","text":"Sonuç: ['kartkayip'] Skor: 1.0\n","output_type":"stream"}],"execution_count":63}]}